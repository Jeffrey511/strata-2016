{"paragraphs":[{"text":"%md\n### 01-GraphX\n#### In which we explore the GraphX concepts, objects & interfaces","dateUpdated":"Mar 27, 2016 11:25:30 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458702623749_1458361432","id":"20160322-201023_1253266209","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>01-GraphX</h3>\n<h4>In which we explore the GraphX concepts, objects &amp; interfaces</h4>\n"},"dateCreated":"Mar 22, 2016 8:10:23 PM","dateStarted":"Mar 27, 2016 11:25:30 PM","dateFinished":"Mar 27, 2016 11:25:30 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2319","focus":true},{"text":"%dep\n// load external packages \nz.reset()\nz.load(\"com.databricks:spark-csv_2.11:1.4.0\") // https://github.com/databricks/spark-csv","dateUpdated":"Mar 27, 2016 11:25:33 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458704775909_1911611484","id":"20160322-204615_162852218","result":{"code":"ERROR","type":"TEXT","msg":"Must be used before SparkInterpreter (%spark) initialized\nHint: put this paragraph before any Spark code and restart Zeppelin/Interpreter"},"dateCreated":"Mar 22, 2016 8:46:15 PM","dateStarted":"Mar 27, 2016 11:25:33 PM","dateFinished":"Mar 27, 2016 11:25:34 PM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:2320","focus":true},{"text":"%pyspark\nimport datetime\nfrom pytz import timezone\nprint \"Last run @%s\" % (datetime.datetime.now(timezone('US/Pacific')))\n#\nimport sys\nprint \"Python Version : %s\" % (sys.version)\n#\nfrom pyspark.context import SparkContext\nprint \"Spark Version  : %s\" % (sc.version)\n#\nfrom pyspark.conf import SparkConf\nconf = SparkConf()\nprint conf.toDebugString()","dateUpdated":"Mar 27, 2016 11:25:40 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458702595068_-1226862438","id":"20160322-200955_1240780889","result":{"code":"SUCCESS","type":"TEXT","msg":"Last run @2016-03-27 23:25:40.777474-07:00\nPython Version : 2.7.10 (default, Oct 23 2015, 18:05:06) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]\nSpark Version  : 1.6.0\n\n"},"dateCreated":"Mar 22, 2016 8:09:55 PM","dateStarted":"Mar 27, 2016 11:25:40 PM","dateFinished":"Mar 27, 2016 11:25:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2321","focus":true},{"text":"import org.apache.spark.graphx._\nimport org.apache.spark.rdd.RDD\n\nprintln(sc.version)\nprintln(sc.appName)\nprintln(sc.getExecutorMemoryStatus)\nprint(sc.getConf.toDebugString)\ndef getCurrentDirectory = new java.io.File( \".\" ).getCanonicalPath\nprintln(getCurrentDirectory)","dateUpdated":"Mar 27, 2016 11:25:52 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458704634235_1197735353","id":"20160322-204354_405084188","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.graphx._\nimport org.apache.spark.rdd.RDD\n1.6.0\nZeppelin\nMap(localhost:60860 -> (536346624,536346624))\nargs=\nmaster=local[*]\nspark.app.id=local-1459146234115\nspark.app.name=Zeppelin\nspark.driver.extraClassPath=:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/interpreter/spark/dep/*:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/interpreter/spark/*:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/zeppelin-interpreter/target/lib/*::/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/conf:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/conf:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/zeppelin-interpreter/target/classes\nspark.driver.host=10.0.1.3\nspark.driver.port=60858\nspark.executor.extraClassPath=:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/interpreter/spark/dep/*:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/interpreter/spark/*:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/zeppelin-interpreter/target/lib/*::/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/conf:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/conf:/Users/ksankar/Downloads/zeppelin-0.5.6-incubating/zeppelin-interpreter/target/classes\nspark.executor.id=driver\nspark.executor.memory=3072m\nspark.externalBlockStore.folderName=spark-7d9037e1-fe7e-4dce-845f-9e88a498de94\nspark.master=local[*]\nspark.repl.class.uri=http://10.0.1.3:60857\nspark.scheduler.mode=FAIR\nzeppelin.dep.additionalRemoteRepository=spark-packages,http://dl.bintray.com/spark-packages/maven,false;\nzeppelin.dep.localrepo=local-repo\nzeppelin.pyspark.python=python\nzeppelin.spark.concurrentSQL=false\nzeppelin.spark.maxResult=1000\nzeppelin.spark.useHiveContext=truegetCurrentDirectory: String\n/Volumes/sdxc-01/Strata-2016\n"},"dateCreated":"Mar 22, 2016 8:43:54 PM","dateStarted":"Mar 27, 2016 11:25:52 PM","dateFinished":"Mar 27, 2016 11:25:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2322","focus":true},{"text":"%md\n## API.inAction(examples => exFun)","dateUpdated":"Mar 27, 2016 11:26:04 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458882340784_-344442038","id":"20160324-220540_1653628855","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>API.inAction(examples => exFun)</h2>\n"},"dateCreated":"Mar 24, 2016 10:05:40 PM","dateStarted":"Mar 27, 2016 11:26:04 PM","dateFinished":"Mar 27, 2016 11:26:04 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2323","focus":true},{"text":"case class Person(name:String,age:Int)\n\nval defaultPerson = Person(\"NA\",0)\n\nval vertexList = List(\n  (1L, Person(\"Alice\", 18)),\n  (2L, Person(\"Bernie\", 17)),\n  (3L, Person(\"Cruz\", 15)),\n  (4L, Person(\"Donald\", 12)),\n  (5L, Person(\"Ed\", 15)),\n  (6L, Person(\"Fran\", 10)),\n  (7L, Person(\"Genghis\",854))\n)\n\nval edgeList = List(\n  Edge(1L, 2L, 5),\n  Edge(1L, 3L, 1),\n  Edge(3L, 2L, 5),\n  Edge(2L, 4L, 12),\n  Edge(4L, 5L, 4),\n  Edge(5L, 6L, 2),\n  Edge(6L, 7L, 2),\n  Edge(7L, 4L, 5),\n  Edge(6L, 4L, 4)\n)\n\nval vertexRDD = sc.parallelize(vertexList)\nval edgeRDD = sc.parallelize(edgeList)\nval graph = Graph(vertexRDD, edgeRDD,defaultPerson)\n","dateUpdated":"Mar 27, 2016 11:26:10 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458702181275_-178249307","id":"20160322-200301_273951060","result":{"code":"SUCCESS","type":"TEXT","msg":"defined class Person\ndefaultPerson: Person = Person(NA,0)\nvertexList: List[(Long, Person)] = List((1,Person(Alice,18)), (2,Person(Bernie,17)), (3,Person(Cruz,15)), (4,Person(Donald,12)), (5,Person(Ed,15)), (6,Person(Fran,10)), (7,Person(Genghis,854)))\nedgeList: List[org.apache.spark.graphx.Edge[Int]] = List(Edge(1,2,5), Edge(1,3,1), Edge(3,2,5), Edge(2,4,12), Edge(4,5,4), Edge(5,6,2), Edge(6,7,2), Edge(7,4,5), Edge(6,4,4))\nvertexRDD: org.apache.spark.rdd.RDD[(Long, Person)] = ParallelCollectionRDD[0] at parallelize at <console>:42\nedgeRDD: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Int]] = ParallelCollectionRDD[1] at parallelize at <console>:39\ngraph: org.apache.spark.graphx.Graph[Person,Int] = org.apache.spark.graphx.impl.GraphImpl@7c9cc8fe\n"},"dateCreated":"Mar 22, 2016 8:03:01 PM","dateStarted":"Mar 27, 2016 11:26:11 PM","dateFinished":"Mar 27, 2016 11:26:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2324","focus":true},{"text":"%md\n### Structural APIs\n### First Lets us count the ways ...","dateUpdated":"Mar 27, 2016 11:26:22 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458855217800_899717942","id":"20160324-143337_1115504186","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Structural APIs</h3>\n<h3>First Lets us count the ways &hellip;</h3>\n"},"dateCreated":"Mar 24, 2016 2:33:37 PM","dateStarted":"Mar 27, 2016 11:26:22 PM","dateFinished":"Mar 27, 2016 11:26:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2325","focus":true},{"text":"graph.numEdges\ngraph.numVertices","dateUpdated":"Mar 27, 2016 11:26:27 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458855243235_-97905308","id":"20160324-143403_1129886277","result":{"code":"SUCCESS","type":"TEXT","msg":"res18: Long = 9\nres19: Long = 7\n"},"dateCreated":"Mar 24, 2016 2:34:03 PM","dateStarted":"Mar 27, 2016 11:26:27 PM","dateFinished":"Mar 27, 2016 11:26:29 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2326","focus":true},{"text":"val vertices = graph.vertices\nvertices.collect.foreach(println)\nval edges = graph.edges\nedges.collect.foreach(println)\nval triplets = graph.triplets\ntriplets.take(3)\ntriplets.map(t=>t.toString).collect().foreach(println)","dateUpdated":"Mar 27, 2016 11:26:30 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458855302587_-980241805","id":"20160324-143502_410289345","result":{"code":"SUCCESS","type":"TEXT","msg":"vertices: org.apache.spark.graphx.VertexRDD[Person] = VertexRDDImpl[11] at RDD at VertexRDD.scala:57\n(4,Person(Donald,12))\n(1,Person(Alice,18))\n(5,Person(Ed,15))\n(6,Person(Fran,10))\n(2,Person(Bernie,17))\n(3,Person(Cruz,15))\n(7,Person(Genghis,854))\nedges: org.apache.spark.graphx.EdgeRDD[Int] = EdgeRDDImpl[13] at RDD at EdgeRDD.scala:40\nEdge(1,2,5)\nEdge(1,3,1)\nEdge(2,4,12)\nEdge(3,2,5)\nEdge(4,5,4)\nEdge(5,6,2)\nEdge(6,4,4)\nEdge(6,7,2)\nEdge(7,4,5)\ntriplets: org.apache.spark.rdd.RDD[org.apache.spark.graphx.EdgeTriplet[Person,Int]] = MapPartitionsRDD[21] at mapPartitions at GraphImpl.scala:51\nres23: Array[org.apache.spark.graphx.EdgeTriplet[Person,Int]] = Array(((1,Person(Alice,18)),(2,Person(Bernie,17)),5), ((1,Person(Alice,18)),(3,Person(Cruz,15)),1), ((2,Person(Bernie,17)),(4,Person(Donald,12)),12))\n((1,Person(Alice,18)),(2,Person(Bernie,17)),5)\n((1,Person(Alice,18)),(3,Person(Cruz,15)),1)\n((2,Person(Bernie,17)),(4,Person(Donald,12)),12)\n((3,Person(Cruz,15)),(2,Person(Bernie,17)),5)\n((4,Person(Donald,12)),(5,Person(Ed,15)),4)\n((5,Person(Ed,15)),(6,Person(Fran,10)),2)\n((6,Person(Fran,10)),(4,Person(Donald,12)),4)\n((6,Person(Fran,10)),(7,Person(Genghis,854)),2)\n((7,Person(Genghis,854)),(4,Person(Donald,12)),5)\n"},"dateCreated":"Mar 24, 2016 2:35:02 PM","dateStarted":"Mar 27, 2016 11:26:30 PM","dateFinished":"Mar 27, 2016 11:26:34 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2327","focus":true},{"text":"val inDeg = graph.inDegrees // Followers\ninDeg.collect().foreach(println)\nval outDeg = graph.outDegrees // Follows\noutDeg.collect().foreach(println)\nval allDeg = graph.degrees\nallDeg.collect().foreach(println)","dateUpdated":"Mar 27, 2016 11:29:22 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458704917866_575994810","id":"20160322-204837_2031839574","result":{"code":"SUCCESS","type":"TEXT","msg":"inDeg: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[26] at RDD at VertexRDD.scala:57\n(4,3)\n(5,1)\n(6,1)\n(2,2)\n(3,1)\n(7,1)\noutDeg: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[30] at RDD at VertexRDD.scala:57\n(4,1)\n(1,2)\n(5,1)\n(6,2)\n(2,1)\n(3,1)\n(7,1)\nallDeg: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[34] at RDD at VertexRDD.scala:57\n(4,4)\n(1,2)\n(5,2)\n(6,3)\n(2,3)\n(3,2)\n(7,2)\n"},"dateCreated":"Mar 22, 2016 8:48:37 PM","dateStarted":"Mar 27, 2016 11:26:45 PM","dateFinished":"Mar 27, 2016 11:26:47 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2328","focus":true},{"text":"%md\n```\ndef subgraph(epred: EdgeTriplet[VD, ED] => Boolean,\n             vpred: (VertexId, VD) => Boolean): Graph[VD, ED] }\n```","dateUpdated":"Mar 27, 2016 11:27:23 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458868074788_-272369838","id":"20160324-180754_2009965487","result":{"code":"SUCCESS","type":"HTML","msg":"<pre><code>def subgraph(epred: EdgeTriplet[VD, ED] =&gt; Boolean,\n             vpred: (VertexId, VD) =&gt; Boolean): Graph[VD, ED] }\n</code></pre>\n"},"dateCreated":"Mar 24, 2016 6:07:54 PM","dateStarted":"Mar 27, 2016 11:27:23 PM","dateFinished":"Mar 27, 2016 11:27:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2329","focus":true},{"text":"val g1 = graph.subgraph(epred = (edge) => edge.attr > 4)\ng1.triplets.collect.foreach(println)","dateUpdated":"Mar 27, 2016 11:29:22 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458866349518_655809262","id":"20160324-173909_1716152021","result":{"code":"SUCCESS","type":"TEXT","msg":"g1: org.apache.spark.graphx.Graph[Person,Int] = org.apache.spark.graphx.impl.GraphImpl@4868400e\n((1,Person(Alice,18)),(2,Person(Bernie,17)),5)\n((2,Person(Bernie,17)),(4,Person(Donald,12)),12)\n((3,Person(Cruz,15)),(2,Person(Bernie,17)),5)\n((7,Person(Genghis,854)),(4,Person(Donald,12)),5)\n"},"dateCreated":"Mar 24, 2016 5:39:09 PM","dateStarted":"Mar 27, 2016 11:29:22 PM","dateFinished":"Mar 27, 2016 11:29:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2330","focus":true},{"text":"%md\n### What is wrong ?","dateUpdated":"Mar 27, 2016 5:48:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867549064_-764611466","id":"20160324-175909_1539430342","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>What is wrong ?</h3>\n"},"dateCreated":"Mar 24, 2016 5:59:09 PM","dateStarted":"Mar 27, 2016 5:48:50 PM","dateFinished":"Mar 27, 2016 5:48:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2331"},{"text":"val g2 = graph.subgraph(vpred = (id, person) => person.age > 21)\ng2.triplets.collect.foreach(println)","dateUpdated":"Mar 27, 2016 11:29:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867577908_1882522264","id":"20160324-175937_2127659421","result":{"code":"SUCCESS","type":"TEXT","msg":"g2: org.apache.spark.graphx.Graph[Person,Int] = org.apache.spark.graphx.impl.GraphImpl@5402f759\n"},"dateCreated":"Mar 24, 2016 5:59:37 PM","dateStarted":"Mar 27, 2016 11:29:39 PM","dateFinished":"Mar 27, 2016 11:29:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2332","focus":true},{"text":"%md\n### Look ma, no edges !","dateUpdated":"Mar 27, 2016 11:29:46 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867782560_1701045021","id":"20160324-180302_1599632894","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Look ma, no edges !</h3>\n"},"dateCreated":"Mar 24, 2016 6:03:02 PM","dateStarted":"Mar 27, 2016 11:29:46 PM","dateFinished":"Mar 27, 2016 11:29:46 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2333","focus":true},{"text":"g2.vertices.collect.foreach(println)\ng2.edges.collect.foreach(println)","dateUpdated":"Mar 27, 2016 11:29:51 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867605653_1938157612","id":"20160324-180005_1596334915","result":{"code":"SUCCESS","type":"TEXT","msg":"(7,Person(Genghis,854))\n"},"dateCreated":"Mar 24, 2016 6:00:05 PM","dateStarted":"Mar 27, 2016 11:29:51 PM","dateFinished":"Mar 27, 2016 11:29:51 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2334","focus":true},{"text":"val g3 = graph.subgraph(vpred = (id, person) => person.age >= 18)\ng3.triplets.collect","dateUpdated":"Mar 27, 2016 11:30:15 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867713539_-2135224965","id":"20160324-180153_1026813772","result":{"code":"SUCCESS","type":"TEXT","msg":"g3: org.apache.spark.graphx.Graph[Person,Int] = org.apache.spark.graphx.impl.GraphImpl@5a6ab0ae\nres41: Array[org.apache.spark.graphx.EdgeTriplet[Person,Int]] = Array()\n"},"dateCreated":"Mar 24, 2016 6:01:53 PM","dateStarted":"Mar 27, 2016 11:30:15 PM","dateFinished":"Mar 27, 2016 11:30:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2335","focus":true},{"text":"%md\n### Just two disjoint vertices\n#### If there are no edges, is it really a graph ?","dateUpdated":"Mar 27, 2016 11:30:22 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867808526_813996303","id":"20160324-180328_673926350","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Just two disjoint vertices</h3>\n<h4>If there are no edges, is it really a graph ?</h4>\n"},"dateCreated":"Mar 24, 2016 6:03:28 PM","dateStarted":"Mar 27, 2016 11:30:22 PM","dateFinished":"Mar 27, 2016 11:30:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2336","focus":true},{"text":"g3.vertices.collect.foreach(println)","dateUpdated":"Mar 27, 2016 11:30:26 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867750607_914572296","id":"20160324-180230_1297828107","result":{"code":"SUCCESS","type":"TEXT","msg":"(1,Person(Alice,18))\n(7,Person(Genghis,854))\n"},"dateCreated":"Mar 24, 2016 6:02:30 PM","dateStarted":"Mar 27, 2016 11:30:26 PM","dateFinished":"Mar 27, 2016 11:30:26 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2337","focus":true},{"text":"%md\n## Community-Affiliation-Strengths\n### Connections !\n#### Let my people call your people !!","dateUpdated":"Mar 27, 2016 5:48:50 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458867859548_-247079867","id":"20160324-180419_190822770","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Community-Affiliation-Strengths</h2>\n<h3>Connections !</h3>\n<h4>Let my people call your people !!</h4>\n"},"dateCreated":"Mar 24, 2016 6:04:19 PM","dateStarted":"Mar 27, 2016 5:48:50 PM","dateFinished":"Mar 27, 2016 5:48:51 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2338"},{"text":"val cc = graph.connectedComponents() // returns another graph; costly operation","dateUpdated":"Mar 27, 2016 11:30:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458788717743_1494067523","id":"20160323-200517_1583977911","result":{"code":"SUCCESS","type":"TEXT","msg":"cc: org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,Int] = org.apache.spark.graphx.impl.GraphImpl@7d115877\n"},"dateCreated":"Mar 23, 2016 8:05:17 PM","dateStarted":"Mar 27, 2016 11:30:35 PM","dateFinished":"Mar 27, 2016 11:30:36 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2339","focus":true},{"text":"cc.triplets.collect","dateUpdated":"Mar 27, 2016 11:30:41 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458796187239_1283798919","id":"20160323-220947_356610108","result":{"code":"SUCCESS","type":"TEXT","msg":"res46: Array[org.apache.spark.graphx.EdgeTriplet[org.apache.spark.graphx.VertexId,Int]] = Array(((1,1),(2,1),5), ((1,1),(3,1),1), ((2,1),(4,1),12), ((3,1),(2,1),5), ((4,1),(5,1),4), ((5,1),(6,1),2), ((6,1),(4,1),4), ((6,1),(7,1),2), ((7,1),(4,1),5))\n"},"dateCreated":"Mar 23, 2016 10:09:47 PM","dateStarted":"Mar 27, 2016 11:30:41 PM","dateFinished":"Mar 27, 2016 11:30:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2340","focus":true},{"text":"graph.connectedComponents.vertices.map(_.swap).groupByKey.map(_._2).collect","dateUpdated":"Mar 27, 2016 11:30:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458795950759_-545634484","id":"20160323-220550_1542067162","result":{"code":"SUCCESS","type":"TEXT","msg":"res48: Array[Iterable[org.apache.spark.graphx.VertexId]] = Array(CompactBuffer(4, 1, 5, 6, 2, 3, 7))\n"},"dateCreated":"Mar 23, 2016 10:05:50 PM","dateStarted":"Mar 27, 2016 11:30:49 PM","dateFinished":"Mar 27, 2016 11:30:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2341","focus":true},{"text":"cc.vertices.map(_._2).collect.distinct.size // No. of connected components","dateUpdated":"Mar 27, 2016 11:31:25 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458796039972_230124923","id":"20160323-220719_2092973057","result":{"code":"SUCCESS","type":"TEXT","msg":"res50: Int = 1\n"},"dateCreated":"Mar 23, 2016 10:07:19 PM","dateStarted":"Mar 27, 2016 11:31:25 PM","dateFinished":"Mar 27, 2016 11:31:26 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2342","focus":true},{"text":"// list the components and its number of nodes in the descending order\ncc.vertices.groupBy(_._2).map(p=>(p._1,p._2.size)).\n    sortBy(x=>x._2,false). // sortBy(keyFunc,ascending)\n    collect()","dateUpdated":"Mar 27, 2016 11:31:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458796098473_871193212","id":"20160323-220818_1270481457","result":{"code":"SUCCESS","type":"TEXT","msg":"res53: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((1,7))\n"},"dateCreated":"Mar 23, 2016 10:08:18 PM","dateStarted":"Mar 27, 2016 11:31:34 PM","dateFinished":"Mar 27, 2016 11:31:35 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2343","focus":true},{"text":"val ccS = graph.stronglyConnectedComponents(10)","dateUpdated":"Mar 27, 2016 11:31:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458796150042_-1408566615","id":"20160323-220910_1728234694","result":{"code":"SUCCESS","type":"TEXT","msg":"ccS: org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,Int] = org.apache.spark.graphx.impl.GraphImpl@1595d805\n"},"dateCreated":"Mar 23, 2016 10:09:10 PM","dateStarted":"Mar 27, 2016 11:31:39 PM","dateFinished":"Mar 27, 2016 11:31:44 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2344","focus":true},{"text":"ccS.triplets.collect","dateUpdated":"Mar 27, 2016 11:31:48 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458797634825_-1360347120","id":"20160323-223354_572774371","result":{"code":"SUCCESS","type":"TEXT","msg":"res56: Array[org.apache.spark.graphx.EdgeTriplet[org.apache.spark.graphx.VertexId,Int]] = Array(((1,1),(2,2),5), ((1,1),(3,3),1), ((2,2),(4,4),12), ((3,3),(2,2),5), ((4,4),(5,4),4), ((5,4),(6,4),2), ((6,4),(4,4),4), ((6,4),(7,4),2), ((7,4),(4,4),5))\n"},"dateCreated":"Mar 23, 2016 10:33:54 PM","dateStarted":"Mar 27, 2016 11:31:48 PM","dateFinished":"Mar 27, 2016 11:31:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2345","focus":true},{"text":"ccS.vertices.map(_.swap).groupByKey.map(_._2).collect","dateUpdated":"Mar 27, 2016 11:31:53 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458797716023_465609863","id":"20160323-223516_2117212077","result":{"code":"SUCCESS","type":"TEXT","msg":"res58: Array[Iterable[org.apache.spark.graphx.VertexId]] = Array(CompactBuffer(4, 5, 6, 7), CompactBuffer(1), CompactBuffer(2), CompactBuffer(3))\n"},"dateCreated":"Mar 23, 2016 10:35:16 PM","dateStarted":"Mar 27, 2016 11:31:53 PM","dateFinished":"Mar 27, 2016 11:31:54 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2346","focus":true},{"text":"ccS.vertices.map(_._2).collect.distinct.size // No. of connected components","dateUpdated":"Mar 27, 2016 11:32:00 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458855673327_-2011234752","id":"20160324-144113_432022637","result":{"code":"SUCCESS","type":"TEXT","msg":"res60: Int = 4\n"},"dateCreated":"Mar 24, 2016 2:41:13 PM","dateStarted":"Mar 27, 2016 11:32:00 PM","dateFinished":"Mar 27, 2016 11:32:01 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2347","focus":true},{"text":"val triCounts = graph.triangleCount()\nval triangleCounts = triCounts.vertices.collect","dateUpdated":"Mar 27, 2016 11:32:04 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458797795859_-863404783","id":"20160323-223635_730812340","result":{"code":"SUCCESS","type":"TEXT","msg":"triCounts: org.apache.spark.graphx.Graph[Int,Int] = org.apache.spark.graphx.impl.GraphImpl@3dad420c\ntriangleCounts: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,2), (1,1), (5,1), (6,2), (2,1), (3,1), (7,1))\n"},"dateCreated":"Mar 23, 2016 10:36:35 PM","dateStarted":"Mar 27, 2016 11:32:04 PM","dateFinished":"Mar 27, 2016 11:32:05 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2348","focus":true},{"text":"%md\n## Algorithms\n### A Versatile Function - aggregateMessages()","dateUpdated":"Mar 27, 2016 11:34:09 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458857522988_1384428748","id":"20160324-151202_906258911","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Algorithms</h2>\n<h3>A Versatile Function - aggregateMessages()</h3>\n"},"dateCreated":"Mar 24, 2016 3:12:02 PM","dateStarted":"Mar 27, 2016 11:34:09 PM","dateFinished":"Mar 27, 2016 11:34:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2349","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1459146852926_1976203541","id":"20160327-233412_82275006","dateCreated":"Mar 27, 2016 11:34:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3178","text":"%md\n```\ndef aggregateMessages[A](\n    sendMsg: (EdgeContext[VD, ED, A]) ⇒ Unit, \n    mergeMsg: (A, A) ⇒ A, \n    tripletFields: TripletFields = TripletFields.All)(implicit arg0: ClassTag[A]): VertexRDD[A]\n```\n* Aggregates values from the neighboring edges and vertices of each vertex.\n    * The user-supplied sendMsg function is invoked on each edge of the graph, generating 0 or more messages to be sent to either vertex in the edge.\n    * The mergeMsg function is then used to combine all messages destined to the same vertex.\n* A - the type of message to be sent to each vertex\n* sendMsg - runs on each edge, sending messages to neighboring vertices using the EdgeContext.\n* mergeMsg - used to combine messages from sendMsg destined to the same vertex. This combiner should be commutative and associative.\n* tripletFields - which fields should be included in the EdgeContext passed to the sendMsg function. If not all fields are needed, specifying this can improve performance","dateUpdated":"Mar 27, 2016 11:40:37 PM","dateFinished":"Mar 27, 2016 11:40:37 PM","dateStarted":"Mar 27, 2016 11:40:37 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<pre><code>def aggregateMessages[A](\n    sendMsg: (EdgeContext[VD, ED, A]) ⇒ Unit, \n    mergeMsg: (A, A) ⇒ A, \n    tripletFields: TripletFields = TripletFields.All)(implicit arg0: ClassTag[A]): VertexRDD[A]\n</code></pre>\n<ul>\n<li>Aggregates values from the neighboring edges and vertices of each vertex.<ul>\n<li>The user-supplied sendMsg function is invoked on each edge of the graph, generating 0 or more messages to be sent to either vertex in the edge.</li>\n<li>The mergeMsg function is then used to combine all messages destined to the same vertex.</li>\n</ul>\n</li>\n<li>A - the type of message to be sent to each vertex</li>\n<li>sendMsg - runs on each edge, sending messages to neighboring vertices using the EdgeContext.</li>\n<li>mergeMsg - used to combine messages from sendMsg destined to the same vertex. This combiner should be commutative and associative.</li>\n<li>tripletFields - which fields should be included in the EdgeContext passed to the sendMsg function. If not all fields are needed, specifying this can improve performance</li>\n</ul>\n"}},{"text":"val oldestFollower = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToDst(edgeContext.srcAttr.age),//sendMsg\n    (x,y) => math.max(x,y) //mergeMsg\n    )\noldestFollower.collect()","dateUpdated":"Mar 27, 2016 11:41:05 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458798172327_-1092423444","id":"20160323-224252_445896556","result":{"code":"SUCCESS","type":"TEXT","msg":"oldestFollower: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[670] at RDD at VertexRDD.scala:57\nres63: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,854), (5,12), (6,15), (2,18), (3,18), (7,10))\n"},"dateCreated":"Mar 23, 2016 10:42:52 PM","dateStarted":"Mar 27, 2016 11:41:05 PM","dateFinished":"Mar 27, 2016 11:41:06 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2350","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1459147293216_131725536","id":"20160327-234133_861630016","dateCreated":"Mar 27, 2016 11:41:33 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3202","text":"%md\n### How do we get the oldest followee ?","dateUpdated":"Mar 27, 2016 11:41:55 PM","dateFinished":"Mar 27, 2016 11:41:55 PM","dateStarted":"Mar 27, 2016 11:41:55 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>How do we get the oldest followee ?</h3>\n"}},{"text":"val oldestFollowee = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToSrc(edgeContext.srcAttr.age),//sendMsg\n    (x,y) => math.max(x,y) //mergeMsg\n    )\noldestFollowee.collect()","dateUpdated":"Mar 27, 2016 11:41:11 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458863232930_-212238975","id":"20160324-164712_1956952029","result":{"code":"SUCCESS","type":"TEXT","msg":"oldestFollowee: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[674] at RDD at VertexRDD.scala:57\nres65: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,12), (1,18), (5,15), (6,10), (2,17), (3,15), (7,854))\n"},"dateCreated":"Mar 24, 2016 4:47:12 PM","dateStarted":"Mar 27, 2016 11:41:11 PM","dateFinished":"Mar 27, 2016 11:41:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2351","focus":true},{"text":"%md\n## Three Questions\n###1. What if we want the youngest follower?\n###2. What if we want the youngest of the nodes folowee ?\n###3. Can we get inDegree with aggregateMessages ?","dateUpdated":"Mar 27, 2016 5:48:52 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458857402031_81468113","id":"20160324-151002_1298055366","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Three Questions</h2>\n<h3>1. What if we want the youngest follower?</h3>\n<h3>2. What if we want the youngest of the nodes folowee ?</h3>\n<h3>3. Can we get inDegree with aggregateMessages ?</h3>\n"},"dateCreated":"Mar 24, 2016 3:10:02 PM","dateStarted":"Mar 27, 2016 5:48:53 PM","dateFinished":"Mar 27, 2016 5:48:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2352"},{"text":"// #1\nval youngestFollower = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToDst(edgeContext.srcAttr.age),//sendMsg\n    (x,y) => math.min(x,y) //mergeMsg\n    )\nyoungestFollower.collect()","dateUpdated":"Mar 27, 2016 11:42:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458856430599_-465410550","id":"20160324-145350_291213838","result":{"code":"SUCCESS","type":"TEXT","msg":"youngestFollower: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[678] at RDD at VertexRDD.scala:57\nres68: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,10), (5,12), (6,15), (2,15), (3,18), (7,10))\n"},"dateCreated":"Mar 24, 2016 2:53:50 PM","dateStarted":"Mar 27, 2016 11:42:39 PM","dateFinished":"Mar 27, 2016 11:42:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2353","focus":true},{"text":"// #2\nval youngestFollowee = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToSrc(edgeContext.srcAttr.age),//sendMsg\n    (x,y) => math.min(x,y) //mergeMsg\n    )\nyoungestFollowee.collect()","dateUpdated":"Mar 27, 2016 11:42:45 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458864532137_79082173","id":"20160324-170852_2117340185","result":{"code":"SUCCESS","type":"TEXT","msg":"youngestFollowee: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[682] at RDD at VertexRDD.scala:57\nres71: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,12), (1,18), (5,15), (6,10), (2,17), (3,15), (7,854))\n"},"dateCreated":"Mar 24, 2016 5:08:52 PM","dateStarted":"Mar 27, 2016 11:42:45 PM","dateFinished":"Mar 27, 2016 11:42:46 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2354","focus":true},{"text":"%md\n### What's Wrong ?","dateUpdated":"Mar 27, 2016 5:48:53 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458861149307_1377281030","id":"20160324-161229_423052815","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>What's Wrong ?</h3>\n"},"dateCreated":"Mar 24, 2016 4:12:29 PM","dateStarted":"Mar 27, 2016 5:48:53 PM","dateFinished":"Mar 27, 2016 5:48:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2355"},{"text":"val iDegree = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToSrc(1),//sendMsg\n    (x,y) => x+y //mergeMsg\n    )\niDegree.collect()\ngraph.inDegrees.collect()","dateUpdated":"Mar 27, 2016 11:42:51 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458856190597_201806984","id":"20160324-144950_1198873312","result":{"code":"SUCCESS","type":"TEXT","msg":"iDegree: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[686] at RDD at VertexRDD.scala:57\nres73: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,1), (1,2), (5,1), (6,2), (2,1), (3,1), (7,1))\nres74: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,3), (5,1), (6,1), (2,2), (3,1), (7,1))\n"},"dateCreated":"Mar 24, 2016 2:49:50 PM","dateStarted":"Mar 27, 2016 11:42:51 PM","dateFinished":"Mar 27, 2016 11:42:53 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2356","focus":true},{"text":"val iDegree = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToDst(1),//sendMsg\n    (x,y) => x+y //mergeMsg\n    )\niDegree.collect()\ngraph.inDegrees.collect()","dateUpdated":"Mar 27, 2016 11:42:59 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458860958585_-747362048","id":"20160324-160918_2079541871","result":{"code":"SUCCESS","type":"TEXT","msg":"iDegree: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[690] at RDD at VertexRDD.scala:57\nres76: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,3), (5,1), (6,1), (2,2), (3,1), (7,1))\nres77: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,3), (5,1), (6,1), (2,2), (3,1), (7,1))\n"},"dateCreated":"Mar 24, 2016 4:09:18 PM","dateStarted":"Mar 27, 2016 11:42:59 PM","dateFinished":"Mar 27, 2016 11:43:00 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2357","focus":true},{"text":"val oDegree = graph.aggregateMessages[Int](\n    edgeContext => edgeContext.sendToSrc(1),//sendMsg\n    (x,y) => x+y //mergeMsg\n    )\noDegree.collect()\ngraph.outDegrees.collect()","dateUpdated":"Mar 27, 2016 11:43:05 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458863777814_-1261467839","id":"20160324-165617_1383244765","result":{"code":"SUCCESS","type":"TEXT","msg":"oDegree: org.apache.spark.graphx.VertexRDD[Int] = VertexRDDImpl[694] at RDD at VertexRDD.scala:57\nres79: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,1), (1,2), (5,1), (6,2), (2,1), (3,1), (7,1))\nres80: Array[(org.apache.spark.graphx.VertexId, Int)] = Array((4,1), (1,2), (5,1), (6,2), (2,1), (3,1), (7,1))\n"},"dateCreated":"Mar 24, 2016 4:56:17 PM","dateStarted":"Mar 27, 2016 11:43:05 PM","dateFinished":"Mar 27, 2016 11:43:06 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2358","focus":true},{"text":"%md\n### PageRank\n```\ndef pageRank(tol: Double, resetProb: Double = 0.15): Graph[Double, Double]\n```\n* Run a dynamic version of PageRank returning a graph with vertex attributes containing the PageRank and edge attributes containing the normalized edge weight.\n\n```\ndef personalizedPageRank(src: VertexId, tol: Double, resetProb: Double = 0.15): Graph[Double, Double]\n```\n* Run personalized PageRank for a given vertex, such that all random walks are started relative to the source node.\n\n```\ndef staticPageRank(numIter: Int, resetProb: Double = 0.15): Graph[Double, Double]\n```\n* Run PageRank for a fixed number of iterations returning a graph with vertex attributes containing the PageRank and edge attributes the normalized edge weight.","dateUpdated":"Mar 27, 2016 11:46:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458866146739_1843838890","id":"20160324-173546_1293578416","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>PageRank</h3>\n<pre><code>def pageRank(tol: Double, resetProb: Double = 0.15): Graph[Double, Double]\n</code></pre>\n<ul>\n<li>Run a dynamic version of PageRank returning a graph with vertex attributes containing the PageRank and edge attributes containing the normalized edge weight.</li>\n</ul>\n<pre><code>def personalizedPageRank(src: VertexId, tol: Double, resetProb: Double = 0.15): Graph[Double, Double]\n</code></pre>\n<ul>\n<li>Run personalized PageRank for a given vertex, such that all random walks are started relative to the source node.</li>\n</ul>\n<pre><code>def staticPageRank(numIter: Int, resetProb: Double = 0.15): Graph[Double, Double]\n</code></pre>\n<ul>\n<li>Run PageRank for a fixed number of iterations returning a graph with vertex attributes containing the PageRank and edge attributes the normalized edge weight.</li>\n</ul>\n"},"dateCreated":"Mar 24, 2016 5:35:46 PM","dateStarted":"Mar 27, 2016 11:46:39 PM","dateFinished":"Mar 27, 2016 11:46:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2359","focus":true},{"text":"val ranks = graph.pageRank(0.1).vertices\nval topVertices = ranks.sortBy(_._2,false).collect","dateUpdated":"Mar 27, 2016 11:43:13 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458882490746_1957124238","id":"20160324-220810_1484287040","result":{"code":"SUCCESS","type":"TEXT","msg":"ranks: org.apache.spark.graphx.VertexRDD[Double] = VertexRDDImpl[812] at RDD at VertexRDD.scala:57\ntopVertices: Array[(org.apache.spark.graphx.VertexId, Double)] = Array((4,0.89599134375), (6,0.7727737499999999), (5,0.732675), (7,0.47842884375), (2,0.34124999999999994), (3,0.21375), (1,0.15))\n"},"dateCreated":"Mar 24, 2016 10:08:10 PM","dateStarted":"Mar 27, 2016 11:43:13 PM","dateFinished":"Mar 27, 2016 11:43:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2360","focus":true},{"text":"%md\n##_That's All Folks !_","dateUpdated":"Mar 27, 2016 5:48:55 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458882579938_-599208751","id":"20160324-220939_1507450697","result":{"code":"SUCCESS","type":"HTML","msg":"<h2><em>That's All Folks !</em></h2>\n"},"dateCreated":"Mar 24, 2016 10:09:39 PM","dateStarted":"Mar 27, 2016 5:48:55 PM","dateFinished":"Mar 27, 2016 5:48:55 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2361"},{"dateUpdated":"Mar 27, 2016 5:48:55 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458882906071_-479848460","id":"20160324-221506_945238215","result":{"code":"SUCCESS","type":"TEXT"},"dateCreated":"Mar 24, 2016 10:15:06 PM","dateStarted":"Mar 27, 2016 5:50:17 PM","dateFinished":"Mar 27, 2016 5:50:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2362"}],"name":"01-GraphX-x","id":"2BG4BG4JP","angularObjects":{"2BFJWMQ9H":[],"2BE8A7YV6":[],"2BG1VHWRJ":[],"2BEKJ6EK5":[],"2BF216UPS":[],"2BEZ62K9N":[],"2BD587MW7":[],"2BE7MJQ3Z":[],"2BFKH5WZX":[],"2BDJW333S":[],"2BEB288BJ":[],"2BFAUCSV2":[],"2BFK98EU6":[],"2BCTH3CWC":[]},"config":{"looknfeel":"default"},"info":{}}